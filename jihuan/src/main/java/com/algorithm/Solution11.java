package com.algorithm;

/**
 * Title: Intersection of Two Linked Lists 两个链表的交叉
 * Description: 该类的功能
 题目
 两个链表的交叉
 请写一个程序，找到两个单链表最开始的交叉节点。
 样例
 下列两个链表：

 A:          a1 → a2
               ↘
               c1 → c2 → c3
               ↗
 B:          b1 → b2 → b3
 在节点 c1 开始交叉。
 注意
 如果两个链表没有交叉，返回null。
 在返回结果后，两个链表仍须保持原有的结构。
 可假定整个链表结构中没有循环。
 挑战
 需满足 O(n) 时间复杂度，且仅用 O(1) 内存。

 解题
 尝试用时间复杂度是O(NM)，却没有解决，在这个博客看到根据两个链表的特性进行解决。
 就如同上图，两个链表相交的部分一定在尾部的，如果两个链表尾部对齐，按照短的链表头节点开始，同时时对两个链表进行遍历，找到相同节点处就是共同的节点。
 这里为了找到短链表的都节点在长链表处的位置<这里的位置是相对的，他们不一定是在一起的，这里只是为了让尾对齐>。先求两个链表的长度
 假设长链表是A 长度lenA 短链表B 长度LenB
 长链表头节点开始走，并lenA-=1 当lenA==lenB的时候说明链表尾部对齐了，这样就开始直接按顺序比较链表节点值是否相等了。时间复杂度是O(M+N)
 * @author jihuan
 * @create 2017-10-15 22:10
 * @version: 1.0
 */
public class Solution11 {
}
